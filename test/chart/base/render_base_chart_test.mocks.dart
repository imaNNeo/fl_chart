// Mocks generated by Mockito 5.4.5 from annotations
// in fl_chart/test/chart/base/render_base_chart_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i12;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/rendering.dart' as _i10;
import 'package:flutter/src/gestures/drag_details.dart' as _i9;
import 'package:flutter/src/gestures/events.dart' as _i11;
import 'package:flutter/src/gestures/long_press.dart' as _i14;
import 'package:flutter/src/gestures/monodrag.dart' as _i7;
import 'package:flutter/src/gestures/recognizer.dart' as _i5;
import 'package:flutter/src/gestures/tap.dart' as _i13;
import 'package:flutter/src/gestures/velocity_tracker.dart' as _i4;
import 'package:flutter/src/widgets/framework.dart' as _i2;
import 'package:flutter/src/widgets/notification_listener.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_1 extends _i1.SmartFake
    implements _i2.InheritedWidget {
  _FakeInheritedWidget_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeVelocityTracker_3 extends _i1.SmartFake
    implements _i4.VelocityTracker {
  _FakeVelocityTracker_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOffsetPair_4 extends _i1.SmartFake implements _i5.OffsetPair {
  _FakeOffsetPair_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i2.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_0(this, Invocation.getter(#widget)),
          )
          as _i2.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
          )
          as bool);

  @override
  _i2.InheritedWidget dependOnInheritedElement(
    _i2.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_1(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i2.InheritedWidget);

  @override
  void visitAncestorElements(_i2.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitAncestorElements, [visitor]),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i2.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i6.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(#dispatchNotification, [notification]),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DiagnosticsNode describeElement(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  _i3.DiagnosticsNode describeWidget(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i3.DiagnosticsNode>[],
          )
          as List<_i3.DiagnosticsNode>);

  @override
  _i3.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i3.DiagnosticsNode);
}

/// A class which mocks [PanGestureRecognizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockPanGestureRecognizer extends _i1.Mock
    implements _i7.PanGestureRecognizer {
  MockPanGestureRecognizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get debugDescription =>
      (super.noSuchMethod(
            Invocation.getter(#debugDescription),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#debugDescription),
            ),
          )
          as String);

  @override
  _i5.DragStartBehavior get dragStartBehavior =>
      (super.noSuchMethod(
            Invocation.getter(#dragStartBehavior),
            returnValue: _i5.DragStartBehavior.down,
          )
          as _i5.DragStartBehavior);

  @override
  set dragStartBehavior(_i5.DragStartBehavior? _dragStartBehavior) =>
      super.noSuchMethod(
        Invocation.setter(#dragStartBehavior, _dragStartBehavior),
        returnValueForMissingStub: null,
      );

  @override
  _i5.MultitouchDragStrategy get multitouchDragStrategy =>
      (super.noSuchMethod(
            Invocation.getter(#multitouchDragStrategy),
            returnValue: _i5.MultitouchDragStrategy.latestPointer,
          )
          as _i5.MultitouchDragStrategy);

  @override
  set multitouchDragStrategy(
    _i5.MultitouchDragStrategy? _multitouchDragStrategy,
  ) => super.noSuchMethod(
    Invocation.setter(#multitouchDragStrategy, _multitouchDragStrategy),
    returnValueForMissingStub: null,
  );

  @override
  set onDown(_i9.GestureDragDownCallback? _onDown) => super.noSuchMethod(
    Invocation.setter(#onDown, _onDown),
    returnValueForMissingStub: null,
  );

  @override
  set onStart(_i9.GestureDragStartCallback? _onStart) => super.noSuchMethod(
    Invocation.setter(#onStart, _onStart),
    returnValueForMissingStub: null,
  );

  @override
  set onUpdate(_i9.GestureDragUpdateCallback? _onUpdate) => super.noSuchMethod(
    Invocation.setter(#onUpdate, _onUpdate),
    returnValueForMissingStub: null,
  );

  @override
  set onEnd(_i7.GestureDragEndCallback? _onEnd) => super.noSuchMethod(
    Invocation.setter(#onEnd, _onEnd),
    returnValueForMissingStub: null,
  );

  @override
  set onCancel(_i7.GestureDragCancelCallback? _onCancel) => super.noSuchMethod(
    Invocation.setter(#onCancel, _onCancel),
    returnValueForMissingStub: null,
  );

  @override
  set minFlingDistance(double? _minFlingDistance) => super.noSuchMethod(
    Invocation.setter(#minFlingDistance, _minFlingDistance),
    returnValueForMissingStub: null,
  );

  @override
  set minFlingVelocity(double? _minFlingVelocity) => super.noSuchMethod(
    Invocation.setter(#minFlingVelocity, _minFlingVelocity),
    returnValueForMissingStub: null,
  );

  @override
  set maxFlingVelocity(double? _maxFlingVelocity) => super.noSuchMethod(
    Invocation.setter(#maxFlingVelocity, _maxFlingVelocity),
    returnValueForMissingStub: null,
  );

  @override
  bool get onlyAcceptDragOnThreshold =>
      (super.noSuchMethod(
            Invocation.getter(#onlyAcceptDragOnThreshold),
            returnValue: false,
          )
          as bool);

  @override
  set onlyAcceptDragOnThreshold(bool? _onlyAcceptDragOnThreshold) =>
      super.noSuchMethod(
        Invocation.setter(
          #onlyAcceptDragOnThreshold,
          _onlyAcceptDragOnThreshold,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.GestureVelocityTrackerBuilder get velocityTrackerBuilder =>
      (super.noSuchMethod(
            Invocation.getter(#velocityTrackerBuilder),
            returnValue:
                (_i10.PointerEvent event) => _FakeVelocityTracker_3(
                  this,
                  Invocation.getter(#velocityTrackerBuilder),
                ),
          )
          as _i7.GestureVelocityTrackerBuilder);

  @override
  set velocityTrackerBuilder(
    _i7.GestureVelocityTrackerBuilder? _velocityTrackerBuilder,
  ) => super.noSuchMethod(
    Invocation.setter(#velocityTrackerBuilder, _velocityTrackerBuilder),
    returnValueForMissingStub: null,
  );

  @override
  _i5.OffsetPair get lastPosition =>
      (super.noSuchMethod(
            Invocation.getter(#lastPosition),
            returnValue: _FakeOffsetPair_4(
              this,
              Invocation.getter(#lastPosition),
            ),
          )
          as _i5.OffsetPair);

  @override
  double get globalDistanceMoved =>
      (super.noSuchMethod(
            Invocation.getter(#globalDistanceMoved),
            returnValue: 0.0,
          )
          as double);

  @override
  set team(_i5.GestureArenaTeam? value) => super.noSuchMethod(
    Invocation.setter(#team, value),
    returnValueForMissingStub: null,
  );

  @override
  set gestureSettings(_i11.DeviceGestureSettings? _gestureSettings) =>
      super.noSuchMethod(
        Invocation.setter(#gestureSettings, _gestureSettings),
        returnValueForMissingStub: null,
      );

  @override
  set supportedDevices(Set<_i12.PointerDeviceKind>? _supportedDevices) =>
      super.noSuchMethod(
        Invocation.setter(#supportedDevices, _supportedDevices),
        returnValueForMissingStub: null,
      );

  @override
  _i5.AllowedButtonsFilter get allowedButtonsFilter =>
      (super.noSuchMethod(
            Invocation.getter(#allowedButtonsFilter),
            returnValue: (int buttons) => false,
          )
          as _i5.AllowedButtonsFilter);

  @override
  bool isFlingGesture(
    _i4.VelocityEstimate? estimate,
    _i12.PointerDeviceKind? kind,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#isFlingGesture, [estimate, kind]),
            returnValue: false,
          )
          as bool);

  @override
  _i9.DragEndDetails? considerFling(
    _i4.VelocityEstimate? estimate,
    _i12.PointerDeviceKind? kind,
  ) =>
      (super.noSuchMethod(Invocation.method(#considerFling, [estimate, kind]))
          as _i9.DragEndDetails?);

  @override
  bool hasSufficientGlobalDistanceToAccept(
    _i12.PointerDeviceKind? pointerDeviceKind,
    double? deviceTouchSlop,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#hasSufficientGlobalDistanceToAccept, [
              pointerDeviceKind,
              deviceTouchSlop,
            ]),
            returnValue: false,
          )
          as bool);

  @override
  bool isPointerAllowed(_i10.PointerEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#isPointerAllowed, [event]),
            returnValue: false,
          )
          as bool);

  @override
  void addAllowedPointer(_i10.PointerDownEvent? event) => super.noSuchMethod(
    Invocation.method(#addAllowedPointer, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void addAllowedPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#addAllowedPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void handleEvent(_i10.PointerEvent? event) => super.noSuchMethod(
    Invocation.method(#handleEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void acceptGesture(int? pointer) => super.noSuchMethod(
    Invocation.method(#acceptGesture, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void rejectGesture(int? pointer) => super.noSuchMethod(
    Invocation.method(#rejectGesture, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void didStopTrackingLastPointer(int? pointer) => super.noSuchMethod(
    Invocation.method(#didStopTrackingLastPointer, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  void handleNonAllowedPointer(_i10.PointerDownEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#handleNonAllowedPointer, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void resolve(_i5.GestureDisposition? disposition) => super.noSuchMethod(
    Invocation.method(#resolve, [disposition]),
    returnValueForMissingStub: null,
  );

  @override
  void resolvePointer(int? pointer, _i5.GestureDisposition? disposition) =>
      super.noSuchMethod(
        Invocation.method(#resolvePointer, [pointer, disposition]),
        returnValueForMissingStub: null,
      );

  @override
  void startTrackingPointer(int? pointer, [_i10.Matrix4? transform]) =>
      super.noSuchMethod(
        Invocation.method(#startTrackingPointer, [pointer, transform]),
        returnValueForMissingStub: null,
      );

  @override
  void stopTrackingPointer(int? pointer) => super.noSuchMethod(
    Invocation.method(#stopTrackingPointer, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void stopTrackingIfPointerNoLongerDown(_i10.PointerEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#stopTrackingIfPointerNoLongerDown, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void addPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#addPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void addPointer(_i10.PointerDownEvent? event) => super.noSuchMethod(
    Invocation.method(#addPointer, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void handleNonAllowedPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#handleNonAllowedPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  bool isPointerPanZoomAllowed(_i11.PointerPanZoomStartEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#isPointerPanZoomAllowed, [event]),
            returnValue: false,
          )
          as bool);

  @override
  _i12.PointerDeviceKind getKindForPointer(int? pointer) =>
      (super.noSuchMethod(
            Invocation.method(#getKindForPointer, [pointer]),
            returnValue: _i12.PointerDeviceKind.touch,
          )
          as _i12.PointerDeviceKind);

  @override
  T? invokeCallback<T>(
    String? name,
    _i5.RecognizerCallback<T>? callback, {
    String Function()? debugReport,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #invokeCallback,
              [name, callback],
              {#debugReport: debugReport},
            ),
          )
          as T?);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShallow({
    String? joiner = ', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringShallow, [], {
              #joiner: joiner,
              #minLevel: minLevel,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringShallow, [], {
                #joiner: joiner,
                #minLevel: minLevel,
              }),
            ),
          )
          as String);

  @override
  String toStringDeep({
    String? prefixLineOne = '',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
    int? wrapWidth = 65,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringDeep, [], {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringDeep, [], {
                #prefixLineOne: prefixLineOne,
                #prefixOtherLines: prefixOtherLines,
                #minLevel: minLevel,
                #wrapWidth: wrapWidth,
              }),
            ),
          )
          as String);

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(
            Invocation.method(#debugDescribeChildren, []),
            returnValue: <_i3.DiagnosticsNode>[],
          )
          as List<_i3.DiagnosticsNode>);
}

/// A class which mocks [TapGestureRecognizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockTapGestureRecognizer extends _i1.Mock
    implements _i13.TapGestureRecognizer {
  MockTapGestureRecognizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onTapDown(_i13.GestureTapDownCallback? _onTapDown) => super.noSuchMethod(
    Invocation.setter(#onTapDown, _onTapDown),
    returnValueForMissingStub: null,
  );

  @override
  set onTapUp(_i13.GestureTapUpCallback? _onTapUp) => super.noSuchMethod(
    Invocation.setter(#onTapUp, _onTapUp),
    returnValueForMissingStub: null,
  );

  @override
  set onTap(_i13.GestureTapCallback? _onTap) => super.noSuchMethod(
    Invocation.setter(#onTap, _onTap),
    returnValueForMissingStub: null,
  );

  @override
  set onTapCancel(_i13.GestureTapCancelCallback? _onTapCancel) =>
      super.noSuchMethod(
        Invocation.setter(#onTapCancel, _onTapCancel),
        returnValueForMissingStub: null,
      );

  @override
  set onSecondaryTap(_i13.GestureTapCallback? _onSecondaryTap) =>
      super.noSuchMethod(
        Invocation.setter(#onSecondaryTap, _onSecondaryTap),
        returnValueForMissingStub: null,
      );

  @override
  set onSecondaryTapDown(_i13.GestureTapDownCallback? _onSecondaryTapDown) =>
      super.noSuchMethod(
        Invocation.setter(#onSecondaryTapDown, _onSecondaryTapDown),
        returnValueForMissingStub: null,
      );

  @override
  set onSecondaryTapUp(_i13.GestureTapUpCallback? _onSecondaryTapUp) =>
      super.noSuchMethod(
        Invocation.setter(#onSecondaryTapUp, _onSecondaryTapUp),
        returnValueForMissingStub: null,
      );

  @override
  set onSecondaryTapCancel(
    _i13.GestureTapCancelCallback? _onSecondaryTapCancel,
  ) => super.noSuchMethod(
    Invocation.setter(#onSecondaryTapCancel, _onSecondaryTapCancel),
    returnValueForMissingStub: null,
  );

  @override
  set onTertiaryTapDown(_i13.GestureTapDownCallback? _onTertiaryTapDown) =>
      super.noSuchMethod(
        Invocation.setter(#onTertiaryTapDown, _onTertiaryTapDown),
        returnValueForMissingStub: null,
      );

  @override
  set onTertiaryTapUp(_i13.GestureTapUpCallback? _onTertiaryTapUp) =>
      super.noSuchMethod(
        Invocation.setter(#onTertiaryTapUp, _onTertiaryTapUp),
        returnValueForMissingStub: null,
      );

  @override
  set onTertiaryTapCancel(
    _i13.GestureTapCancelCallback? _onTertiaryTapCancel,
  ) => super.noSuchMethod(
    Invocation.setter(#onTertiaryTapCancel, _onTertiaryTapCancel),
    returnValueForMissingStub: null,
  );

  @override
  String get debugDescription =>
      (super.noSuchMethod(
            Invocation.getter(#debugDescription),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#debugDescription),
            ),
          )
          as String);

  @override
  _i5.GestureRecognizerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i5.GestureRecognizerState.ready,
          )
          as _i5.GestureRecognizerState);

  @override
  set team(_i5.GestureArenaTeam? value) => super.noSuchMethod(
    Invocation.setter(#team, value),
    returnValueForMissingStub: null,
  );

  @override
  set gestureSettings(_i11.DeviceGestureSettings? _gestureSettings) =>
      super.noSuchMethod(
        Invocation.setter(#gestureSettings, _gestureSettings),
        returnValueForMissingStub: null,
      );

  @override
  set supportedDevices(Set<_i12.PointerDeviceKind>? _supportedDevices) =>
      super.noSuchMethod(
        Invocation.setter(#supportedDevices, _supportedDevices),
        returnValueForMissingStub: null,
      );

  @override
  _i5.AllowedButtonsFilter get allowedButtonsFilter =>
      (super.noSuchMethod(
            Invocation.getter(#allowedButtonsFilter),
            returnValue: (int buttons) => false,
          )
          as _i5.AllowedButtonsFilter);

  @override
  bool isPointerAllowed(_i10.PointerDownEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#isPointerAllowed, [event]),
            returnValue: false,
          )
          as bool);

  @override
  void handleTapDown({required _i10.PointerDownEvent? down}) =>
      super.noSuchMethod(
        Invocation.method(#handleTapDown, [], {#down: down}),
        returnValueForMissingStub: null,
      );

  @override
  void handleTapUp({
    required _i10.PointerDownEvent? down,
    required _i10.PointerUpEvent? up,
  }) => super.noSuchMethod(
    Invocation.method(#handleTapUp, [], {#down: down, #up: up}),
    returnValueForMissingStub: null,
  );

  @override
  void handleTapCancel({
    required _i10.PointerDownEvent? down,
    _i10.PointerCancelEvent? cancel,
    required String? reason,
  }) => super.noSuchMethod(
    Invocation.method(#handleTapCancel, [], {
      #down: down,
      #cancel: cancel,
      #reason: reason,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void addAllowedPointer(_i10.PointerDownEvent? event) => super.noSuchMethod(
    Invocation.method(#addAllowedPointer, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void startTrackingPointer(int? pointer, [_i10.Matrix4? transform]) =>
      super.noSuchMethod(
        Invocation.method(#startTrackingPointer, [pointer, transform]),
        returnValueForMissingStub: null,
      );

  @override
  void handlePrimaryPointer(_i10.PointerEvent? event) => super.noSuchMethod(
    Invocation.method(#handlePrimaryPointer, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void resolve(_i5.GestureDisposition? disposition) => super.noSuchMethod(
    Invocation.method(#resolve, [disposition]),
    returnValueForMissingStub: null,
  );

  @override
  void didExceedDeadline() => super.noSuchMethod(
    Invocation.method(#didExceedDeadline, []),
    returnValueForMissingStub: null,
  );

  @override
  void acceptGesture(int? pointer) => super.noSuchMethod(
    Invocation.method(#acceptGesture, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void rejectGesture(int? pointer) => super.noSuchMethod(
    Invocation.method(#rejectGesture, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  void handleNonAllowedPointer(_i10.PointerDownEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#handleNonAllowedPointer, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void handleEvent(_i10.PointerEvent? event) => super.noSuchMethod(
    Invocation.method(#handleEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void didExceedDeadlineWithEvent(_i10.PointerDownEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#didExceedDeadlineWithEvent, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void didStopTrackingLastPointer(int? pointer) => super.noSuchMethod(
    Invocation.method(#didStopTrackingLastPointer, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void resolvePointer(int? pointer, _i5.GestureDisposition? disposition) =>
      super.noSuchMethod(
        Invocation.method(#resolvePointer, [pointer, disposition]),
        returnValueForMissingStub: null,
      );

  @override
  void stopTrackingPointer(int? pointer) => super.noSuchMethod(
    Invocation.method(#stopTrackingPointer, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void stopTrackingIfPointerNoLongerDown(_i10.PointerEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#stopTrackingIfPointerNoLongerDown, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void addPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#addPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void addAllowedPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#addAllowedPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void addPointer(_i10.PointerDownEvent? event) => super.noSuchMethod(
    Invocation.method(#addPointer, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void handleNonAllowedPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#handleNonAllowedPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  bool isPointerPanZoomAllowed(_i11.PointerPanZoomStartEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#isPointerPanZoomAllowed, [event]),
            returnValue: false,
          )
          as bool);

  @override
  _i12.PointerDeviceKind getKindForPointer(int? pointer) =>
      (super.noSuchMethod(
            Invocation.method(#getKindForPointer, [pointer]),
            returnValue: _i12.PointerDeviceKind.touch,
          )
          as _i12.PointerDeviceKind);

  @override
  T? invokeCallback<T>(
    String? name,
    _i5.RecognizerCallback<T>? callback, {
    String Function()? debugReport,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #invokeCallback,
              [name, callback],
              {#debugReport: debugReport},
            ),
          )
          as T?);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShallow({
    String? joiner = ', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringShallow, [], {
              #joiner: joiner,
              #minLevel: minLevel,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringShallow, [], {
                #joiner: joiner,
                #minLevel: minLevel,
              }),
            ),
          )
          as String);

  @override
  String toStringDeep({
    String? prefixLineOne = '',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
    int? wrapWidth = 65,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringDeep, [], {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringDeep, [], {
                #prefixLineOne: prefixLineOne,
                #prefixOtherLines: prefixOtherLines,
                #minLevel: minLevel,
                #wrapWidth: wrapWidth,
              }),
            ),
          )
          as String);

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(
            Invocation.method(#debugDescribeChildren, []),
            returnValue: <_i3.DiagnosticsNode>[],
          )
          as List<_i3.DiagnosticsNode>);
}

/// A class which mocks [LongPressGestureRecognizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockLongPressGestureRecognizer extends _i1.Mock
    implements _i14.LongPressGestureRecognizer {
  MockLongPressGestureRecognizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onLongPressDown(_i14.GestureLongPressDownCallback? _onLongPressDown) =>
      super.noSuchMethod(
        Invocation.setter(#onLongPressDown, _onLongPressDown),
        returnValueForMissingStub: null,
      );

  @override
  set onLongPressCancel(
    _i14.GestureLongPressCancelCallback? _onLongPressCancel,
  ) => super.noSuchMethod(
    Invocation.setter(#onLongPressCancel, _onLongPressCancel),
    returnValueForMissingStub: null,
  );

  @override
  set onLongPress(_i14.GestureLongPressCallback? _onLongPress) =>
      super.noSuchMethod(
        Invocation.setter(#onLongPress, _onLongPress),
        returnValueForMissingStub: null,
      );

  @override
  set onLongPressStart(_i14.GestureLongPressStartCallback? _onLongPressStart) =>
      super.noSuchMethod(
        Invocation.setter(#onLongPressStart, _onLongPressStart),
        returnValueForMissingStub: null,
      );

  @override
  set onLongPressMoveUpdate(
    _i14.GestureLongPressMoveUpdateCallback? _onLongPressMoveUpdate,
  ) => super.noSuchMethod(
    Invocation.setter(#onLongPressMoveUpdate, _onLongPressMoveUpdate),
    returnValueForMissingStub: null,
  );

  @override
  set onLongPressUp(_i14.GestureLongPressUpCallback? _onLongPressUp) =>
      super.noSuchMethod(
        Invocation.setter(#onLongPressUp, _onLongPressUp),
        returnValueForMissingStub: null,
      );

  @override
  set onLongPressEnd(_i14.GestureLongPressEndCallback? _onLongPressEnd) =>
      super.noSuchMethod(
        Invocation.setter(#onLongPressEnd, _onLongPressEnd),
        returnValueForMissingStub: null,
      );

  @override
  set onSecondaryLongPressDown(
    _i14.GestureLongPressDownCallback? _onSecondaryLongPressDown,
  ) => super.noSuchMethod(
    Invocation.setter(#onSecondaryLongPressDown, _onSecondaryLongPressDown),
    returnValueForMissingStub: null,
  );

  @override
  set onSecondaryLongPressCancel(
    _i14.GestureLongPressCancelCallback? _onSecondaryLongPressCancel,
  ) => super.noSuchMethod(
    Invocation.setter(#onSecondaryLongPressCancel, _onSecondaryLongPressCancel),
    returnValueForMissingStub: null,
  );

  @override
  set onSecondaryLongPress(
    _i14.GestureLongPressCallback? _onSecondaryLongPress,
  ) => super.noSuchMethod(
    Invocation.setter(#onSecondaryLongPress, _onSecondaryLongPress),
    returnValueForMissingStub: null,
  );

  @override
  set onSecondaryLongPressStart(
    _i14.GestureLongPressStartCallback? _onSecondaryLongPressStart,
  ) => super.noSuchMethod(
    Invocation.setter(#onSecondaryLongPressStart, _onSecondaryLongPressStart),
    returnValueForMissingStub: null,
  );

  @override
  set onSecondaryLongPressMoveUpdate(
    _i14.GestureLongPressMoveUpdateCallback? _onSecondaryLongPressMoveUpdate,
  ) => super.noSuchMethod(
    Invocation.setter(
      #onSecondaryLongPressMoveUpdate,
      _onSecondaryLongPressMoveUpdate,
    ),
    returnValueForMissingStub: null,
  );

  @override
  set onSecondaryLongPressUp(
    _i14.GestureLongPressUpCallback? _onSecondaryLongPressUp,
  ) => super.noSuchMethod(
    Invocation.setter(#onSecondaryLongPressUp, _onSecondaryLongPressUp),
    returnValueForMissingStub: null,
  );

  @override
  set onSecondaryLongPressEnd(
    _i14.GestureLongPressEndCallback? _onSecondaryLongPressEnd,
  ) => super.noSuchMethod(
    Invocation.setter(#onSecondaryLongPressEnd, _onSecondaryLongPressEnd),
    returnValueForMissingStub: null,
  );

  @override
  set onTertiaryLongPressDown(
    _i14.GestureLongPressDownCallback? _onTertiaryLongPressDown,
  ) => super.noSuchMethod(
    Invocation.setter(#onTertiaryLongPressDown, _onTertiaryLongPressDown),
    returnValueForMissingStub: null,
  );

  @override
  set onTertiaryLongPressCancel(
    _i14.GestureLongPressCancelCallback? _onTertiaryLongPressCancel,
  ) => super.noSuchMethod(
    Invocation.setter(#onTertiaryLongPressCancel, _onTertiaryLongPressCancel),
    returnValueForMissingStub: null,
  );

  @override
  set onTertiaryLongPress(
    _i14.GestureLongPressCallback? _onTertiaryLongPress,
  ) => super.noSuchMethod(
    Invocation.setter(#onTertiaryLongPress, _onTertiaryLongPress),
    returnValueForMissingStub: null,
  );

  @override
  set onTertiaryLongPressStart(
    _i14.GestureLongPressStartCallback? _onTertiaryLongPressStart,
  ) => super.noSuchMethod(
    Invocation.setter(#onTertiaryLongPressStart, _onTertiaryLongPressStart),
    returnValueForMissingStub: null,
  );

  @override
  set onTertiaryLongPressMoveUpdate(
    _i14.GestureLongPressMoveUpdateCallback? _onTertiaryLongPressMoveUpdate,
  ) => super.noSuchMethod(
    Invocation.setter(
      #onTertiaryLongPressMoveUpdate,
      _onTertiaryLongPressMoveUpdate,
    ),
    returnValueForMissingStub: null,
  );

  @override
  set onTertiaryLongPressUp(
    _i14.GestureLongPressUpCallback? _onTertiaryLongPressUp,
  ) => super.noSuchMethod(
    Invocation.setter(#onTertiaryLongPressUp, _onTertiaryLongPressUp),
    returnValueForMissingStub: null,
  );

  @override
  set onTertiaryLongPressEnd(
    _i14.GestureLongPressEndCallback? _onTertiaryLongPressEnd,
  ) => super.noSuchMethod(
    Invocation.setter(#onTertiaryLongPressEnd, _onTertiaryLongPressEnd),
    returnValueForMissingStub: null,
  );

  @override
  String get debugDescription =>
      (super.noSuchMethod(
            Invocation.getter(#debugDescription),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#debugDescription),
            ),
          )
          as String);

  @override
  _i5.GestureRecognizerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i5.GestureRecognizerState.ready,
          )
          as _i5.GestureRecognizerState);

  @override
  set team(_i5.GestureArenaTeam? value) => super.noSuchMethod(
    Invocation.setter(#team, value),
    returnValueForMissingStub: null,
  );

  @override
  set gestureSettings(_i11.DeviceGestureSettings? _gestureSettings) =>
      super.noSuchMethod(
        Invocation.setter(#gestureSettings, _gestureSettings),
        returnValueForMissingStub: null,
      );

  @override
  set supportedDevices(Set<_i12.PointerDeviceKind>? _supportedDevices) =>
      super.noSuchMethod(
        Invocation.setter(#supportedDevices, _supportedDevices),
        returnValueForMissingStub: null,
      );

  @override
  _i5.AllowedButtonsFilter get allowedButtonsFilter =>
      (super.noSuchMethod(
            Invocation.getter(#allowedButtonsFilter),
            returnValue: (int buttons) => false,
          )
          as _i5.AllowedButtonsFilter);

  @override
  bool isPointerAllowed(_i10.PointerDownEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#isPointerAllowed, [event]),
            returnValue: false,
          )
          as bool);

  @override
  void didExceedDeadline() => super.noSuchMethod(
    Invocation.method(#didExceedDeadline, []),
    returnValueForMissingStub: null,
  );

  @override
  void handlePrimaryPointer(_i10.PointerEvent? event) => super.noSuchMethod(
    Invocation.method(#handlePrimaryPointer, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void resolve(_i5.GestureDisposition? disposition) => super.noSuchMethod(
    Invocation.method(#resolve, [disposition]),
    returnValueForMissingStub: null,
  );

  @override
  void acceptGesture(int? pointer) => super.noSuchMethod(
    Invocation.method(#acceptGesture, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void addAllowedPointer(_i10.PointerDownEvent? event) => super.noSuchMethod(
    Invocation.method(#addAllowedPointer, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void handleNonAllowedPointer(_i10.PointerDownEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#handleNonAllowedPointer, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void handleEvent(_i10.PointerEvent? event) => super.noSuchMethod(
    Invocation.method(#handleEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void didExceedDeadlineWithEvent(_i10.PointerDownEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#didExceedDeadlineWithEvent, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void rejectGesture(int? pointer) => super.noSuchMethod(
    Invocation.method(#rejectGesture, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void didStopTrackingLastPointer(int? pointer) => super.noSuchMethod(
    Invocation.method(#didStopTrackingLastPointer, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(#debugFillProperties, [properties]),
        returnValueForMissingStub: null,
      );

  @override
  void resolvePointer(int? pointer, _i5.GestureDisposition? disposition) =>
      super.noSuchMethod(
        Invocation.method(#resolvePointer, [pointer, disposition]),
        returnValueForMissingStub: null,
      );

  @override
  void startTrackingPointer(int? pointer, [_i10.Matrix4? transform]) =>
      super.noSuchMethod(
        Invocation.method(#startTrackingPointer, [pointer, transform]),
        returnValueForMissingStub: null,
      );

  @override
  void stopTrackingPointer(int? pointer) => super.noSuchMethod(
    Invocation.method(#stopTrackingPointer, [pointer]),
    returnValueForMissingStub: null,
  );

  @override
  void stopTrackingIfPointerNoLongerDown(_i10.PointerEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#stopTrackingIfPointerNoLongerDown, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void addPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#addPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void addAllowedPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#addAllowedPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  void addPointer(_i10.PointerDownEvent? event) => super.noSuchMethod(
    Invocation.method(#addPointer, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void handleNonAllowedPointerPanZoom(_i11.PointerPanZoomStartEvent? event) =>
      super.noSuchMethod(
        Invocation.method(#handleNonAllowedPointerPanZoom, [event]),
        returnValueForMissingStub: null,
      );

  @override
  bool isPointerPanZoomAllowed(_i11.PointerPanZoomStartEvent? event) =>
      (super.noSuchMethod(
            Invocation.method(#isPointerPanZoomAllowed, [event]),
            returnValue: false,
          )
          as bool);

  @override
  _i12.PointerDeviceKind getKindForPointer(int? pointer) =>
      (super.noSuchMethod(
            Invocation.method(#getKindForPointer, [pointer]),
            returnValue: _i12.PointerDeviceKind.touch,
          )
          as _i12.PointerDeviceKind);

  @override
  T? invokeCallback<T>(
    String? name,
    _i5.RecognizerCallback<T>? callback, {
    String Function()? debugReport,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #invokeCallback,
              [name, callback],
              {#debugReport: debugReport},
            ),
          )
          as T?);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShallow({
    String? joiner = ', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringShallow, [], {
              #joiner: joiner,
              #minLevel: minLevel,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringShallow, [], {
                #joiner: joiner,
                #minLevel: minLevel,
              }),
            ),
          )
          as String);

  @override
  String toStringDeep({
    String? prefixLineOne = '',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
    int? wrapWidth = 65,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toStringDeep, [], {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
              #wrapWidth: wrapWidth,
            }),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringDeep, [], {
                #prefixLineOne: prefixLineOne,
                #prefixOtherLines: prefixOtherLines,
                #minLevel: minLevel,
                #wrapWidth: wrapWidth,
              }),
            ),
          )
          as String);

  @override
  String toStringShort() =>
      (super.noSuchMethod(
            Invocation.method(#toStringShort, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#toStringShort, []),
            ),
          )
          as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toDiagnosticsNode, [], {
              #name: name,
              #style: style,
            }),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#toDiagnosticsNode, [], {
                #name: name,
                #style: style,
              }),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(
            Invocation.method(#debugDescribeChildren, []),
            returnValue: <_i3.DiagnosticsNode>[],
          )
          as List<_i3.DiagnosticsNode>);
}
